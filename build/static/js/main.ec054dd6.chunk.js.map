{"version":3,"sources":["components/QuestionCard/QuestionCard.jsx","components/GameOver/GameOver.jsx","components/QuestionContainer/QuestionContainer.jsx","components/Title/Title.jsx","App.js","serviceWorker.js","index.js"],"names":["QuestionCard","question","className","GameOver","score","QuestionContainer","state","questions","gameOver","currentStringIndex","getQuestion","Axios","get","then","res","setState","data","clearInterval","interval","handleChange","e","currentQuestion","input","target","value","console","log","copyQuestionState","newQuestionArray","filter","newScore","this","setInterval","length","map","i","key","id","type","placeholder","onChange","React","Component","Title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8YAUeA,G,YAPM,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAEnB,OACI,yBAAKC,UAAU,iBAAiBD,EAASA,YCGlCE,G,MANE,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACf,OACI,yBAAKF,UAAU,aAAf,mBAA4CE,KC8ErCC,E,4MA5EXC,MAAQ,CACJC,UAAW,GACXC,UAAU,EACVC,mBAAoB,EACpBL,MAAO,G,EAcXM,YAAc,WACVC,IACCC,IAAI,8BACJC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACR,UAAU,GAAD,mBAAM,EAAKD,MAAMC,WAAjB,CAA2BO,EAAIE,a,EAI/DR,SAAW,WAEP,GADAS,cAAc,EAAKC,WACS,IAAxB,EAAKZ,MAAME,SAGX,OAAO,KAFP,EAAKO,SAAS,CAACP,UAAU,K,EAMjCW,aAAe,SAACC,GACZ,IACMC,EADwB,EAAKf,MAAMC,UAAU,EAAKD,MAAMG,oBAChBR,SACxCqB,EAAQF,EAAEG,OAAOC,MAIvB,GAFAC,QAAQC,IAAIL,GAERA,IAAoBC,EAAO,CAC3B,IAAMK,EAAiB,eAAO,EAAKrB,OAC7BsB,EAAmBD,EAAkBpB,UAAUsB,QAAO,SAAA5B,GACzD,OAAOA,EAASA,WAAaoB,KAE1BS,EAAWH,EAAkBvB,MAAQ,EAC3C,EAAKW,SAAS,CACVR,UAAWqB,EACXxB,MAAO0B,IAEXL,QAAQC,IAAI,EAAKpB,MAAMF,OACvBgB,EAAEG,OAAOC,MAAQ,K,kEA7CrBO,KAAKrB,cACLqB,KAAKb,SAAWc,YAAYD,KAAKrB,YAAa,Q,2CAI9C,GAAoC,IAAhCqB,KAAKzB,MAAMC,UAAU0B,OACrB,OAAOF,KAAKvB,a,+BA2CV,IAAD,OACL,OACI,yBAAKN,UAAU,sBAEkB,KAAzB6B,KAAKzB,MAAMC,UACXwB,KAAKzB,MAAMC,UAAU2B,KAAI,SAACjC,EAAUkC,GAChC,OAAO,kBAAC,EAAD,CAAclC,SAAU,EAAKK,MAAMC,UAAU4B,GAAIC,IAAKnC,EAASoC,QAExE,MAGsB,IAAxBN,KAAKzB,MAAME,SAAoB,kBAAC,EAAD,CAAUJ,MAAO2B,KAAKzB,MAAMF,QAAW,KAE1E,2BAAOF,UAAU,4BAA4BoC,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAACpB,GAAD,OAAO,EAAKD,aAAaC,W,GAvEpGqB,IAAMC,WCMvBC,G,MATD,WACV,OACI,yBAAKzC,UAAU,oBACX,wBAAIA,UAAU,gBAAd,6BACA,iICQG0C,MAVf,WAEE,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.ec054dd6.chunk.js","sourcesContent":["import React from 'react';\nimport './question-card.scss';\n\nconst QuestionCard = ({question}) => {\n    \n    return (\n        <div className=\"question-card\">{question.question}</div>\n    )\n}\n\nexport default QuestionCard;","import React from 'react';\nimport './game-over.scss';\n\nconst GameOver = ({score}) => {\n    return(\n        <div className=\"game-over\">GAME OVER Score:{score}</div>\n    )\n}\n\nexport default GameOver;","import React from 'react';\nimport Axios from 'axios';\nimport './question-container.scss';\nimport QuestionCard from '../QuestionCard/QuestionCard';\nimport GameOver from '../GameOver/GameOver';\n\nclass QuestionContainer extends React.Component {\n    state = {\n        questions: [], \n        gameOver: false,\n        currentStringIndex: 0,\n        score: 0\n    };\n\n    componentDidMount() {\n        this.getQuestion();\n        this.interval = setInterval(this.getQuestion, 4500);\n    }\n\n    componentDidUpdate() {\n        if (this.state.questions.length === 5) {\n            return this.gameOver();\n        }\n    }\n\n    getQuestion = () => {\n        Axios\n        .get('http://localhost:8080/play')\n        .then(res => {\n            this.setState({questions: [...this.state.questions,res.data]})\n        })\n    }\n\n    gameOver = () => {\n        clearInterval(this.interval);\n        if (this.state.gameOver === false) {\n            this.setState({gameOver: true})\n        } else {\n            return null\n        }\n    }\n\n    handleChange = (e) => {\n        const currentQuestionObject = this.state.questions[this.state.currentStringIndex];\n        const currentQuestion = currentQuestionObject.question;\n        const input = e.target.value;\n        \n        console.log(currentQuestion);\n\n        if (currentQuestion === input) {\n            const copyQuestionState = {...this.state};\n            const newQuestionArray = copyQuestionState.questions.filter(question => {\n               return question.question !== currentQuestion \n            });\n            const newScore = copyQuestionState.score + 1;\n            this.setState({\n                questions: newQuestionArray,\n                score: newScore\n            })\n            console.log(this.state.score);\n            e.target.value = \"\";\n        }\n    }\n\n    render() {\n        return (   \n            <div className=\"question-container\">\n                {\n                    this.state.questions !== \"\" ?\n                    this.state.questions.map((question, i) => {\n                        return <QuestionCard question={this.state.questions[i]} key={question.id} />\n                    })\n                    : null\n                }\n                {\n                    this.state.gameOver === true ? <GameOver score={this.state.score}/> : null\n                }\n                <input className=\"question-container__input\" type=\"text\" placeholder=\"Type here\" onChange={(e) => this.handleChange(e)} />\n            </div>\n        )\n    }\n}\n\nexport default QuestionContainer;","import React from 'react';\nimport './title.scss';\n\nconst Title = () => {\n    return (\n        <div className=\"title__container\">\n            <h1 className=\"title__title\">Question Time with Angus!</h1>\n            <p>Your mission, if you choose to accept it: Save Jon! Type Angus' questions to make them go away.</p>\n        </div>\n    )\n}\n\nexport default Title;","import React from 'react';\nimport './App.scss';\nimport QuestionContainer from './components/QuestionContainer/QuestionContainer';\nimport Title from './components/Title/Title';\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n      <Title />\n      <QuestionContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}